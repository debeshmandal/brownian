#!/usr/bin/env python
"""core.py - auto-generated by softnanotools"""
from pathlib import Path
from typing import Union, List, Tuple

import numpy as np
import pandas as pd

from softnanotools.logger import Logger
logger = Logger(__name__)

import readdy
from readdy._internal.readdybinding.common.util import TrajectoryParticle # type: ignore

from .lammps import write_LAMMPS_dump

class ParticleFrame():
    def __init__(self, frame: List[TrajectoryParticle], box: np.ndarray):
        self.time = frame[0].t
        self.box = box
        data = {
            'x': [],
            'y': [],
            'z': [],
            'id': [],
            'type': [],
            'flavor': [],
        }
        for particle in frame:
            data['x'].append(particle.position[0])
            data['y'].append(particle.position[1])
            data['z'].append(particle.position[2])
            data['id'].append(particle.id)
            data['type'].append(particle.type)
            data['flavor'].append(particle.flavor)

        self.dataframe = \
            pd.DataFrame(data).sort_values('id').reset_index(drop=True)

        del data

    @property
    def array(self) -> np.ndarray:
        return self.dataframe[['x', 'y', 'z']].to_numpy()

    def to_LAMMPS_dump(self, fname: Union[str, Path]):
        write_LAMMPS_dump(
            self.dataframe,
            fname,
            self.time,
            self.box,
        )

class ParticleTrajectory(readdy.Trajectory):
    """Class for storing positions of particles outputted from
    a simulation using ReaDDy"""
    def __init__(self, fname: Union[str, Path]):
        logger.info(f'Reading ReaDDy trajectory from {fname}')

        _traj = readdy.Trajectory(fname)
        _raw = _traj.read()

        self.box = _traj.box_size
        self._time, self._frames = self.load(_raw, self.box)

        del _traj
        del _raw

    @staticmethod
    def load(
        trajectory: List[List[TrajectoryParticle]],
        box: np.ndarray
    ) -> Tuple[np.ndarray, List[ParticleFrame]]:

        _frames = [ParticleFrame(f, box) for f in trajectory]
        _time = [f.time for f in _frames]

        return _time, _frames

    @property
    def time(self) -> np.ndarray:
        return self._time

    @property
    def frames(self) -> List[ParticleFrame]:
        return self._frames

if __name__ == '__main__':
    import doctest
    doctest.testmod()
