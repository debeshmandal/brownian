#!/usr/bin/env python
"""diatomic.py - prototype bond breaking reactions:

Uses hydrogels to configure the following system

2 reactions:
    A-A + E -> A-B + E (spatial) r=2.0, k=1.0
    A-B -> C + C (structural) k=1.0

2 particle_types:
    E (enzyme)
    C (released)

2 topology_particle_types:
    A (monomer)
    B (unbonded)

1 topology_type
    molecule

2 potential_types
    harmonic repulsion (pair; all) r0=1.0, k=2.0
    harmonic bonding (bond; A-A A-B) r0=1.0, k=5.0
"""
from typing import List
import numpy as np
from softnanotools.logger import Logger
logger = Logger('DIATOMIC')

from hydrogels.utils.system import System
from hydrogels.utils.topology import Topology, TopologyBond

DEFAULT_DICTIONARY = {
    'A': 1.0,
    'B': 1.0,
    'C': 1.0,
    'E': 1.0,
}

def register_bonding(
    system: System,
    monomer: str = 'A',
    length: float = 1.0,
    force_constant: float = 2.5,
):
    bond = TopologyBond(
        'harmonic',
        monomer,
        monomer,
        length=length,
        force_constant=force_constant
    )
    bond.register(system)
    return

def create_topologies(
    N: int,
    box: float = 25.0,
    top_type: str = 'molecule',
    monomer: str = 'A'
) -> List[Topology]:
    result = []
    for i in range(N):
        positions = np.array([])
        molecule = Topology(
            top_type,
            sequence=f'{monomer}{monomer}',
            edges=[(0, 1)],
            positions=positions,
        )
        result.append(molecule)
    return result

def create_system(
    box: float = 25.0,
    diffusion_dictionary: dict = DEFAULT_DICTIONARY,
):
    system = System([box, box, box], units=None)
    return

def main(**kwargs):
    logger.info('Running diatomic...')
    # insert code here
    logger.info('Done!')
    return

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(
        description='diatomic.py - auto-generated by softnanotools'
    )
    main(**vars(parser.parse_args()))
