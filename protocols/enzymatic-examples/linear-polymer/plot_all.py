#!/usr/bin/env python
"""plot_all.py - auto-generated by softnanotools"""
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from softnanotools.logger import Logger
logger = Logger('PLOT ALL')

plt.style.use('tableau-colorblind10')

titles = {
    'enzymes': '[E]',
    'spring_length': 'Harmonic Repulsion Strength',
    'reaction_rate': 'Reaction Propensity',
    'diffusion_constant': 'Diffusion Constant',
}

SCHEMA = {
    'A': ['enzymes', [10, 20, 30, 40, 50]],
    'B': ['spring_length', [0.25, 0.50, 1.00, 1.50, 2.00]],
    'C': ['reaction_rate', [0.01, 0.1, 1.0, 10.0]],
    'D': ['diffusion_constant', [0.01, 0.1, 1.0, 10.0]]
}
markers = ['x', 's', 'o', '+', '^']
colours = ['r', 'b', 'g', 'k', 'm']

def calculate_rate(time: np.ndarray, n: np.ndarray) -> float:
    gradient = np.polyfit(np.log(time), np.log(n), 1)
    return gradient

def plot_ID(ID: str):
    fig, ax = plt.subplots()
    parameter, values = SCHEMA[ID]
    rates = []
    for i, value in enumerate(values):
        data = pd.read_csv(f'{ID}{i+1}.csv')
        params = dict(
            markevery=len(data) // 30 if len(data) > 50 else 5,
            errorevery=len(data) // 30 if len(data) > 50 else 5,
            capsize=2
        )
        ax.errorbar(
            data['t'],
            data['B_mean'],
            yerr=data['B_std'],
            fmt=f"{markers[i]}{colours[i]}",
            label=f'{value:.2f}',
            **params
        )
        temp = data[data['t'] < 10]
        temp = temp[temp['t'] > 1]
        rate = calculate_rate(
            temp['t'].to_numpy(),
            temp['B_mean'].to_numpy()
        )
        t_max = data['t'].max()
        ax.plot(
            [0.1, t_max],
            [np.exp(rate[1]) * 0.1 ** rate[0], np.exp(rate[1]) * t_max ** rate[0]],
            f'{colours[i]}:'
        )
        rates.append(rate[0])
        logger.info(f'{ID}{i+1}: {rate}')

    ax.set_title(titles[parameter], fontsize='xx-large')
    ax.set_xlabel('Timestep', fontsize='xx-large')
    ax.set_ylabel('N', fontsize='xx-large')
    ax.legend(frameon=False, fontsize='x-large')
    ax.set_yscale('log')
    ax.set_xscale('log')

    fig2, ax2 = plt.subplots()
    ax2.plot(values, rates, 'k-x')
    ax2.set_xlabel(titles[parameter], fontsize='xx-large')
    ax2.set_ylabel('Exponent', fontsize='xx-large')
    ax2.tick_params(axis='both', which='major', labelsize='xx-large')

    if ID in ['C', 'D']:
        ax2.set_xscale('log')


    fig.tight_layout()
    fig.savefig(f'{ID}.png')

    fig2.tight_layout()
    fig2.savefig(f'{ID}-exponent.png')

    return

def main(**kwargs):
    logger.info('Running plot_all...')
    for ID in SCHEMA.keys():
        plot_ID(ID)
    logger.info('Done!')
    return

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(
        description='plot_all.py - auto-generated by softnanotools'
    )
    main(**vars(parser.parse_args()))
